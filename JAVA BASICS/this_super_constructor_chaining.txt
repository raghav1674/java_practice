- this: is a local reference variable which points to the caller object.
        - it is present in every insatnce member function 
        - it cannot be modified.
        
- super: is a local reference variable which points ot the caller object.
        - it is present in every instance member function 
        - it cannot be modified.
        - it is a local reference variable of super class type.(IMPORTANT Point)

suppose:

    class A{
        int a,b;

        void f1(){};
    }
    class B{

        int a,b,c;
        void f1(){};
        void f2(){};
    }


    A aref = new B();
    B bref = new B();   

We can think of `this` as the  `bref` and `super` as the `aref`.
as with the help of super can refer the functions and the data members of the super class of that child class.

- we can refer to only overridded methods of base class and all props and the methods of teh base class using the `super`.

- we then come to know about the Constructor Chaining:
    - if we donot create the Constructor in the base and the Child class the default constrcutor is creaeted by the compiler and the first line of the constrcutor is super(); ie whenever the Constructor of Child is called the Base class constructor is called first.

    in Cpp:

    class A{

      public A(){ } //by the compiler. 
    }

    class B: public A{

        B():A(){  // by the compiler.

        }
    }

    in Java:

        class A{

            A(){} // default 
        }
        class B extends A{
            
            B(){
                super(); // first line by compiler itself.

            } //default.


        }


2. class A{

    A(){} // default
}

class B extends A{

    B(){
        super(); // default.
        S.O.P("B Constructor"); // myself
    }
}

3. class A{

    A(int x){};
}
class B extends A{

    B(){

        super();    // default   ----> error as there is no constructor in base with zero parameters.
    }
}

Resolve:

 class A{

    A(int x){}
}

class B extends A{

    B(){

        super(10);
    }
}


Constructor Chaining: Constructor calling other constructor of the same class using  `this()`;


class A{

    A(int x,int y,int z){};
    A(int x){};
    
}

class B extends A{

1   B(){
        super(10);
    }
2   B(int x){
        this();

    }
3  B(int x,int y){
        this(10);

    }
}


